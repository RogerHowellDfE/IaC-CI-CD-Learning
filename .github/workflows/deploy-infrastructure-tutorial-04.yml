name: Deploy Infrastructure
concurrency: WorkflowConcurrencyKey

on:
  workflow_dispatch:
  push:
    branches:
    - tutorial-04

permissions:
  id-token: write  ## Need to be able to write the ID token (i.e., ask Azure AD for token and write the response)
  contents: read   ## Need to be able to read what it creates (i.e., read what was retrieved from Azure AD)

env:
    AZURE_RESOURCEGROUP_NAME: Xyz-Tutorial-04
    ENVIRONMENT_TYPE: nonprod
    DEPLOYMENT_NAME: "GitHub-Workflow-Run-${{ github.run_number }}" ## Alphanumeric plus .-_ (i.e., `[a-zA-Z0-9.-_]+`)
    PATH_TO_BICEP_FILE: ./deploy/main-tutorial-04.bicep

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run Bicep linter
      run: az bicep build --file ${{ env.PATH_TO_BICEP_FILE }} ## Performing `bulld` implicitly runs linter

  validate:
    runs-on: ubuntu-latest
#     needs: [lint]
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID_TUTORIAL_04 }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - uses: azure/arm-deploy@v1
      name: Run preflight validation
      with:
        deploymentName: ${{ env.DEPLOYMENT_NAME }}
        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
        template: ${{ env.PATH_TO_BICEP_FILE }}
        parameters: environmentType=${{ env.ENVIRONMENT_TYPE }}
        deploymentMode: Validate

  preview:
     runs-on: ubuntu-latest
     needs: [lint, validate]
     steps: 
     - uses: actions/checkout@v3.3.0
     - uses: azure/login@v1
       name: Sign in to Azure
       with:
        client-id: ${{ secrets.AZURE_CLIENT_ID_TUTORIAL_04 }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
     - uses: azure/arm-deploy@v1
       name: Run what-if
       with:
        ## When using custom linter configuration, Bicep writes log data to stderr, which GHA interprets as an error
        ## Disabling, per https://learn.microsoft.com/en-gb/training/modules/test-bicep-code-using-github-actions/5-exercise-add-lint-validate-jobs-workflow
        failOnStdErr: false
        deploymentName: ${{ env.DEPLOYMENT_NAME }}
        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
        template: ${{ env.PATH_TO_BICEP_FILE }}
        parameters: environmentType=${{ env.ENVIRONMENT_TYPE }}
        additionalArguments: --what-if


  deploy:
    runs-on: ubuntu-latest
    environment: Tutorial-04      ## Environment protection rules on this environment specification in GitHub will trigger requirement for manual approval
    needs: [preview]
    outputs:
      ## Outputs from `deploy` must be specified withis the bicep file
      appServiceAppHostName: ${{ steps.deploy.outputs.appServiceAppHostName }}
    steps:
    - uses: actions/checkout@v3.3.0
    
    - name: Check secrets are set
      shell: bash
      run: |
        if [ "${{ secrets.AZURE_CLIENT_ID_TUTORIAL_04 }}" != '' ]; then
          echo "AZURE_CLIENT_ID_TUTORIAL_04 is set";
        else
          echo >&2 "AZURE_CLIENT_ID_TUTORIAL_04 unavailable";
        fi
        if [ "${{ secrets.AZURE_TENANT_ID }} != '' ]; then
          echo "AZURE_TENANT_ID is set";
        else
          echo >&2 "AZURE_TENANT_ID unavailable";
        fi
        if [ "${{ secrets.AZURE_SUBSCRIPTION_ID }} != '' ]; then
          echo "AZURE_SUBSCRIPTION_ID is set";
        else
          echo >&2 "AZURE_SUBSCRIPTION_ID unavailable";
        fi

    - uses: azure/login@v1
      with:
        ## Discussion: Arguable if these ID values are "secrets"(???)
        ## - Must be able to authenticate as the GitHub branch/PR/whatever (as specified within Azure federated ID config), to be able to use these details
        ## - Do not need to routinely rotate/revoke them etc
        ## - Potential social engineering attack / information leverage vector?
        ## - Advantageous to configure as secrets as it makes the workflow file transportable
        client-id: ${{ secrets.AZURE_CLIENT_ID_TUTORIAL_04 }}   ## Application ID for the application registration, _not_ the object ID
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}               ## Unique identifier for your Azure AD tenant (directory)
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}   ## The Azure subscription ID being interacted with / deployed to

    - uses: azure/arm-deploy@v1
      id: deploy
      with:
        ## When using custom linter configuration, Bicep writes log data to stderr, which GHA interprets as an error
        ## Disabling, per https://learn.microsoft.com/en-gb/training/modules/test-bicep-code-using-github-actions/5-exercise-add-lint-validate-jobs-workflow
        failOnStdErr: false
        deploymentName: "GitHub-Workflow-Run-${{ github.run_number }}" ## Alphanumeric plus .-_ (i.e., `[a-zA-Z0-9.-_]+`)
        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
        template: ${{ env.PATH_TO_BICEP_FILE }}
        parameters: environmentType=${{ env.ENVIRONMENT_TYPE }}

  
  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - uses: actions/checkout@v3

    - name: Check app service hostname has been passed
      shell: bash
      run: |
        if [ "${{ needs.deploy.outputs.appServiceAppHostName }}" != '' ]; then
          echo "needs.deploy.outputs.appServiceAppHostName is set";
        else
          echo >&2 "needs.deploy.outputs.appServiceAppHostName unavailable";
        fi
        
        
    ## PowerShell and Pester are both preinstalled on GitHub-hosted runners. You don't need to do anything special to use them in a script step.
    ## https://learn.microsoft.com/en-gb/training/modules/test-bicep-code-using-github-actions/9-exercise-add-test-job-workflow?pivots=powershell
    - run: |
        $container = New-PesterContainer `
          -Path 'deploy/Website.Tests.ps1' `
          -Data @{ HostName = '${{needs.deploy.outputs.appServiceAppHostName}}' }
        Invoke-Pester `
          -Container $container `
          -CI
      name: Run smoke tests
      shell: pwsh

